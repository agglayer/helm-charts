apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "bridge-tester.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "bridge-tester.labels" . | nindent 4 }}
spec:
  template:
    spec:
      containers:
      - name: script-runner
        image: ghcr.io/foundry-rs/foundry:latest
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "#################################################"
            echo "##        Starting bridge-tester script        ##"
            echo "#################################################"
            echo ""
            
            echo "## [Step] Apt update and install deps"
            apt-get update && apt-get install -y curl
            echo ""
            
            echo "## [Step] Installing the latest version of polygon-cli for linux amd64"
            curl -s https://api.github.com/repos/0xPolygon/polygon-cli/releases/latest \
              | grep "browser_download_url" \
              | grep "linux_amd64" \
              | cut -d '"' -f 4 \
              | xargs -n 1 curl -LO
            tar -xzf polycli*.tar.gz
            rm polycli*.tar.gz            
            chmod +x polycli*
            mv polycli* /usr/local/bin/polycli
            polycli version
            if [ $? -ne 0 ]; then
              echo "## [Error] Failed to verify polygon-cli installation"
              exit 1
            fi
            echo "## [Status] polygon-cli installed successfully"
            echo ""
            
            echo "## [Step] Prepare environment"
            private_key=0x40a53cfb3568d18931d7ddb0bf8b8ed5a610cee678e2db4fd6982bcb3d9b81d0
            eth_address=$(cast wallet address --private-key $private_key)
            l1_rpc_url=https://sepolia.drpc.org

            bridge_pp1_url=http://bridge.cdk22:8080
            rpc_pp1_url=http://cdk-erigon-rpc.cdk22:8123

            bridge_pp2_url=http://bridge.cdk23:8080
            rpc_pp2_url=http://cdk-erigon-rpc.cdk23:8123

            bridge_address=0x1348947e282138d8f377b467F7D9c2EB0F335d1f
            seb_address=0x72293B2e981D4d0642531357F0792ae1b70Bf1aB
            l2_weth_address=$(cast call --rpc-url $rpc_pp2_url $bridge_address 'WETHToken()(address)')

            token_hash=$(cast keccak $(cast abi-encode --packed 'f(uint32,address)' 0 $seb_address))
            l2_seb_address=$(cast call --rpc-url $rpc_pp1_url $bridge_address 'tokenInfoToWrappedToken(bytes32)(address)' $token_hash)

            printf "Current ETH   balance on PP 1: %s\n" $(cast balance --ether --rpc-url $rpc_pp1_url $eth_address)
            printf "Current WSEB  balance on PP 1: %s\n" $(cast from-wei $(cast call --rpc-url $rpc_pp1_url $l2_seb_address 'balanceOf(address)(uint256)' $eth_address | sed 's/ .*//'))

            printf "Current SEB   balance on PP 2: %s\n" $(cast balance --ether --rpc-url $rpc_pp2_url $eth_address)
            printf "Current WETH  balance on PP 2: %s\n" $(cast from-wei $(cast call --rpc-url $rpc_pp2_url $l2_weth_address 'balanceOf(address)(uint256)' $eth_address | sed 's/ .*//'))
            echo ""

            echo "## [Step] Bridge across networks"
            echo "# PP1 to PP2 ETH"
            polycli ulxly bridge message \
                    --bridge-address $bridge_address \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --value $(date +%s) \
                    --destination-network 23 \
                    --rpc-url $rpc_pp1_url
            echo ""

            echo "# PP1 to PP2 WSEB"
            polycli ulxly bridge asset \
                    --bridge-address $bridge_address \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --value $(date +%s) \
                    --destination-network 23 \
                    --rpc-url $rpc_pp1_url \
                    --token-address $l2_seb_address
            echo ""

            echo "# PP1 to L1 ETH"
            polycli ulxly bridge asset \
                    --bridge-address $bridge_address \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --value $(date +%s) \
                    --destination-network 0 \
                    --rpc-url $rpc_pp1_url
            echo ""

            echo "# PP2 to PP1 SEB"
            polycli ulxly bridge asset \
                    --bridge-address $bridge_address \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --value $(date +%s) \
                    --destination-network 22 \
                    --rpc-url $rpc_pp2_url
            echo ""

            echo "# PP2 to PP1 WETH"
            polycli ulxly bridge weth \
                    --bridge-address $bridge_address \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --value $(date +%s) \
                    --destination-network 22 \
                    --rpc-url $rpc_pp2_url \
                    --token-address $l2_weth_address
            echo ""

            echo "# PP2 to L1 SEB"
            polycli ulxly bridge asset \
                    --bridge-address $bridge_address \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --value $(date +%s) \
                    --destination-network 0 \
                    --rpc-url $rpc_pp2_url
            echo ""

            echo "# Claim everything from PP1"
            polycli ulxly claim-everything \
                    --bridge-address $bridge_address \
                    --bridge-service-map 22=$bridge_pp1_url \
                    --bridge-service-map 23=$bridge_pp2_url \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --rpc-url $rpc_pp1_url \
                    --bridge-limit 1000
            echo ""

            echo "# Claim everything from PP2"
            polycli ulxly claim-everything \
                    --bridge-address $bridge_address \
                    --bridge-service-map 22=$bridge_pp1_url \
                    --bridge-service-map 23=$bridge_pp2_url \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --rpc-url $rpc_pp2_url \
                    --bridge-limit 1000
            echo ""

            echo "# Claim everything from PP1 with offset"
            polycli ulxly claim-everything \
                    --bridge-address $bridge_address \
                    --bridge-service-map 22=$bridge_pp1_url \
                    --bridge-service-map 23=$bridge_pp2_url \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --rpc-url $rpc_pp1_url \
                    --bridge-limit 1000 \
                    --bridge-offset 200
            echo ""

            echo "# Claim everything from PP2 with offset"
            polycli ulxly claim-everything \
                    --bridge-address $bridge_address \
                    --bridge-service-map 22=$bridge_pp1_url \
                    --bridge-service-map 23=$bridge_pp2_url \
                    --destination-address $eth_address \
                    --private-key $private_key \
                    --rpc-url $rpc_pp2_url \
                    --bridge-limit 1000 \
                    --bridge-offset 200
            echo ""
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
      restartPolicy: Never
