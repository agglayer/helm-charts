apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "blockscout.componentName" (dict "componentNameKey" "postgres" "Values" .Values "Release" .Release "Chart" .Chart) }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "blockscout.labels" . | nindent 4 }}
spec:
  serviceName: postgres
  replicas: {{ .Values.blockscout.postgres.replicas }}
  selector:
    matchLabels:
      {{- include "blockscout.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "blockscout.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: postgres
          image: {{ .Values.blockscout.postgres.image }}
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret-postgres
                  key: postgres-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
              subPath: pgdata
            - name: config-volume
              mountPath: /docker-entrypoint-initdb.d/init-db.sql
              subPath: init-db.sql
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    echo "Waiting for PostgreSQL to be ready..."
                    until pg_isready -h localhost -U $POSTGRES_USER; do sleep 2; done
                    echo "Executing init-db.sql..."
                    PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -d postgres -f /docker-entrypoint-initdb.d/init-db.sql
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc
        - name: config-volume
          configMap:
            name: database-configmap
