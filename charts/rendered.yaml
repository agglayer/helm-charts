---
# Source: blockscout/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: blockscout
---
# Source: blockscout/templates/postgres-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: blockscout
stringData:
  postgres-password: "master"
---
# Source: blockscout/templates/configmap-backend.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: blockscout

data:
  API_V2_ENABLED: "true"
  BACKEND_EXPOSED: "false"
  BLOCKSCOUT_PROTOCOL: "http"
  BRIDGED_TOKENS_ENABLED: "true"
  CHAIN_ID: "1"
  CHAIN_TYPE: "polygon_zkevm"
  COIN: "ETH"
  DATABASE_URL: "postgresql://blockscout:blockscout@postgres:5432/blockscout"
  DB_NAME: "blockscout"
  DB_PASSWORD: "blockscout"
  DB_USER: "blockscout"
  DISABLE_INDEXER: "false"
  ECTO_USE_SSL: "false"
  ETHEREUM_JSONRPC_HTTP_INSECURE: "true"
  ETHEREUM_JSONRPC_HTTP_URL: "https://rpc.zkevm-rpc.com"
  ETHEREUM_JSONRPC_TRACE_URL: "https://trace.zkevm-rpc.com"
  ETHEREUM_JSONRPC_VARIANT: "geth"
  ETHEREUM_JSONRPC_WS_URL: "wss://ws.zkevm-rpc.com"
  INDEXER_POLYGON_ZKEVM_BATCHES_ENABLED: "true"
  INDEXER_POLYGON_ZKEVM_L1_BRIDGE_CONTRACT: "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe"
  INDEXER_POLYGON_ZKEVM_L1_BRIDGE_NETWORK_ID: "0"
  INDEXER_POLYGON_ZKEVM_L1_BRIDGE_ROLLUP_INDEX: "0"
  INDEXER_POLYGON_ZKEVM_L1_BRIDGE_START_BLOCK: "16896721"
  INDEXER_POLYGON_ZKEVM_L1_RPC: "https://rpc2.sepolia.org/"
  INDEXER_POLYGON_ZKEVM_L2_BRIDGE_CONTRACT: "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe"
  INDEXER_POLYGON_ZKEVM_L2_BRIDGE_NETWORK_ID: "1"
  INDEXER_POLYGON_ZKEVM_L2_BRIDGE_ROLLUP_INDEX: "0"
  INDEXER_POLYGON_ZKEVM_L2_BRIDGE_START_BLOCK: "0"
  LOGO: "/images/blockscout_logo.svg"
  LOGO_FOOTER: "/images/blockscout_logo.svg"
  MIX_ENV: "prod"
  NETWORK: "POE"
  SHOW_OUTDATED_NETWORK_MODAL: "false"
  SUBNETWORK: "Polygon CDK"
  SUPPORTED_CHAINS: "[]"
  TITLE: "Polygon CDK"
---
# Source: blockscout/templates/configmap-database.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-config
  namespace: blockscout
data:
  init.sql: |
    
    CREATE USER blockscout with password 'blockscout';
    CREATE DATABASE blockscout OWNER blockscout;
    grant all privileges on database blockscout to blockscout;
    
    CREATE USER stats with password 'stats';
    CREATE DATABASE stats OWNER stats;
    grant all privileges on database stats to stats;
---
# Source: blockscout/templates/configmap-frontend.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: blockscout
data:
  NEXT_PUBLIC_AD_BANNER_PROVIDER: "none"
  NEXT_PUBLIC_AD_TEXT_PROVIDER: "none"
  NEXT_PUBLIC_API_HOST: "api-host"
  NEXT_PUBLIC_API_PORT: "4004"
  NEXT_PUBLIC_API_PROTOCOL: "http"
  NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL: "ws"
  NEXT_PUBLIC_APP_HOST: "127.0.0.1"
  NEXT_PUBLIC_APP_PORT: "8000"
  NEXT_PUBLIC_APP_PROTOCOL: "http"
  NEXT_PUBLIC_DEFI_DROPDOWN_ITEMS: '[{"text": "Polygon zkEVM Bridge", "icon": "swap", "url": "https://app.uniswap.org/#/swap" }]'
  NEXT_PUBLIC_NETWORK_ID: "1"
  NEXT_PUBLIC_NETWORK_NAME: "Polygon CDK"
  NEXT_PUBLIC_ROLLUP_L1_BASE_URL: "https://etherscan.io/"
  NEXT_PUBLIC_ROLLUP_TYPE: "zkEvm"
  NEXT_PUBLIC_STATS_API_HOST: "http://stats-host:8050"
  NEXT_PUBLIC_TRANSACTION_INTERPRETATION_PROVIDER: "blockscout"
  NEXT_PUBLIC_USE_NEXT_JS_PROXY: "false"
  NEXT_PUBLIC_VISUALIZE_API_HOST: "http://visualize-host:8050"
---
# Source: blockscout/templates/configmap-stats.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: stats-config
  namespace: blockscout
data:
  DB_NAME: blockscout
  DB_USER: blockscout
  DB_PASSWORD: blockscout
  DATABASE_URL: "postgresql://blockscout:blockscout@postgres:5432/blockscout"
  ECTO_USE_SSL: "false"
  MIX_ENV: "prod"
  LOGO: "/images/blockscout_logo.svg"
  LOGO_FOOTER: "/images/blockscout_logo.svg"
  SUPPORTED_CHAINS: "[]"
  SHOW_OUTDATED_NETWORK_MODAL: "false"
  DISABLE_INDEXER: "false"
  INDEXER_ZKEVM_BATCHES_ENABLED: "true"
  API_V2_ENABLED: "true"
  BLOCKSCOUT_PROTOCOL: "http"
  INDEXER_POLYGON_ZKEVM_BATCHES_ENABLED: "true"
  BRIDGED_TOKENS_ENABLED: "true"
  STATS__DB_URL: "postgresql://blockscout:blockscout@postgres:5432/blockscout"
  STATS__BLOCKSCOUT_DB_URL: "postgresql://blockscout:blockscout@postgres:5432/blockscout"
  STATS__CREATE_DATABASE: "false"
  STATS__RUN_MIGRATIONS: "true"
  STATS__SERVER__HTTP__CORS__ENABLED: "false"
---
# Source: blockscout/templates/configmap-visualize.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: visualize-config
  namespace: blockscout
data:
  DB_NAME: blockscout
  DB_USER: blockscout
  DB_PASSWORD: blockscout
  DATABASE_URL: "postgresql://blockscout:blockscout@postgres:5432/blockscout"
  ECTO_USE_SSL: "false"
  MIX_ENV: "prod"
  LOGO: "/images/blockscout_logo.svg"
  LOGO_FOOTER: "/images/blockscout_logo.svg"
  SUPPORTED_CHAINS: "[]"
  SHOW_OUTDATED_NETWORK_MODAL: "false"
  DISABLE_INDEXER: "false"
  INDEXER_ZKEVM_BATCHES_ENABLED: "true"
  API_V2_ENABLED: "true"
  BLOCKSCOUT_PROTOCOL: "http"
  INDEXER_POLYGON_ZKEVM_BATCHES_ENABLED: "true"
  BRIDGED_TOKENS_ENABLED: "true"
---
# Source: blockscout/templates/service-backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: blockscout
spec:
  ports:
    - name: internal
      port: 4004
      targetPort: 4004
    - name: external
      port: 80
      targetPort: 4004
  selector:
    app: backend
---
# Source: blockscout/templates/service-database.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: blockscout
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
# Source: blockscout/templates/service-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: blockscout
spec:
  ports:
    - name: internal
      port: 8000
      targetPort: 8000
    - name: external
      port: 80
      targetPort: 8000
  selector:
    app: frontend
---
# Source: blockscout/templates/service-stats.yaml
apiVersion: v1
kind: Service
metadata:
  name: stats
  namespace: blockscout
spec:
  ports:
    - port: 8050
  selector:
    app: stats
---
# Source: blockscout/templates/service-visualize.yaml
apiVersion: v1
kind: Service
metadata:
  name: visualize
  namespace: blockscout
spec:
  ports:
    - port: 8050
  selector:
    app: visualize
---
# Source: blockscout/templates/deployment-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: blockscout
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: blockscout/blockscout-zkevm:6.8.1
          ports:
            - containerPort: 4004
          envFrom:
            - configMapRef:
                name: backend-config
          command: ["/bin/sh", "-c"]
          args: ['bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()" && bin/blockscout start']
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "sleep 60"]
---
# Source: blockscout/templates/deployment-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: blockscout
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: ghcr.io/blockscout/frontend:v1.35.0
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: frontend-config
---
# Source: blockscout/templates/deployment-stats.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stats
  namespace: blockscout
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stats
  template:
    metadata:
      labels:
        app: stats
    spec:
      containers:
        - name: stats
          image: ghcr.io/blockscout/stats:v2.1.1
          ports:
            - containerPort: 8050
          envFrom:
            - configMapRef:
                name: stats-config
---
# Source: blockscout/templates/deployment-visualize.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: visualize
  namespace: blockscout
spec:
  replicas: 1
  selector:
    matchLabels:
      app: visualize
  template:
    metadata:
      labels:
        app: visualize
    spec:
      containers:
        - name: visualize
          image: ghcr.io/blockscout/visualizer:v0.2.1
          ports:
            - containerPort: 8050
          envFrom:
            - configMapRef:
                name: visualize-config
---
# Source: blockscout/templates/statefulset-database.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: blockscout
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
      volumes: # Correct: Volumes defined here
        - name: init-sql
          configMap:
            name: database-config
            items:
              - key: init.sql
                path: init.sql
        - name: postgres-data # Add this volume for postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-postgres-0 # Or use dynamic name if needed
      initContainers:
        - name: init-sql
          image: busybox
          command: ['sh', '-c', 'cp /init-sql/init.sql /docker-entrypoint-initdb.d/']
          volumeMounts:
            - name: init-sql
              mountPath: /init-sql
            - name: postgres-data
              mountPath: /docker-entrypoint-initdb.d/
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
      containers:
        - name: postgres
          image: postgres:17.0
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "master"
            - name: POSTGRES_USER
              value: "master"
            - name: POSTGRES_PASSWORD
              value: "master"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          command: ["postgres", "-N", "500"]
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
        storageClassName: "standard"
