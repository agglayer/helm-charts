# Lookup db password
{{- $opSecrets := (lookup "v1" "Secret" .Release.Namespace "op-secrets") }}

# If we set this to be false, we'll assume there IS a trusted sequencer that we can use some where to determine the state
IsTrustedSequencer = false

# If we set this to be true, then we assume that we are the trusted sequencer and the synchronizer must read the history from L1 or DAC
# IsTrustedSequencer = true

[Log]
Environment = "production" # "production" or "development"
Level = "info"
Outputs = ["stderr"]

[State]
[State.DB]
User = "pless"
Password = "{{- index $opSecrets.data "dbPlessPassword" | b64dec }}"
Name = "state_db"
Host = "{{ .Release.Name }}-postgresql"
Port = "5432"
EnableLog = false
MaxConns = 20
[State.Batch]
[State.Batch.Constraints]
MaxTxsPerBatch = 300
MaxBatchBytesSize = 120000
MaxCumulativeGasUsed = 1125899906842624
MaxKeccakHashes = 2145
MaxPoseidonHashes = 252357
MaxPoseidonPaddings = 135191
MaxMemAligns = 236585
MaxArithmetics = 236585
MaxBinaries = 473170
MaxSteps = 7570538
MaxSHA256Hashes = 1596

[Pool]
FreeClaimGasLimit = 1500000
IntervalToRefreshBlockedAddresses = "5m"
IntervalToRefreshGasPrices = "5s"
MaxTxBytesSize=100132
MaxTxDataBytesSize=100000
DefaultMinGasPriceAllowed = 1000000000
MinAllowedGasPriceInterval = "5m"
PollMinAllowedGasPriceInterval = "15s"
AccountQueue = 64
GlobalQueue = 1024
[Pool.EffectiveGasPrice]
Enabled = false
L1GasPriceFactor = 0.25
ByteGasCost = 16
ZeroByteGasCost = 4
NetProfit = 1
BreakEvenFactor = 1.1
FinalDeviationPct = 10
EthTransferGasPrice = 0
EthTransferL1GasPriceFactor = 0
L2GasPriceSuggesterFactor = 0.5
[Pool.DB]
User = "pless"
Password = "{{- index $opSecrets.data "dbPlessPassword" | b64dec }}"
Name = "pool_db"
Host = "{{ .Release.Name }}-postgresql"
Port = "5432"
EnableLog = false
MaxConns = 200

[Etherman]
URL = "{{- index $opSecrets.data "rpcUrl" | b64dec }}"
ForkIDChunkSize = 20000
MultiGasProvider = false
[Etherscan]
ApiKey = ""

[RPC]
Host = "0.0.0.0"
Port = 8123
ReadTimeout = "60s"
WriteTimeout = "60s"
MaxRequestsPerIPAndSecond = 5000
SequencerNodeURI = ""
EnableL2SuggestedGasPricePolling = true
[RPC.WebSockets]
Enabled = true
Port = 8133

[Synchronizer]
SyncInterval = "1s"
SyncChunkSize = 100
TrustedSequencerURL = ""
L1SynchronizationMode = "parallel"
[Synchronizer.L1ParallelSynchronization]
MaxClients = 10
MaxPendingNoProcessedBlocks = 25
RequestLastBlockPeriod = "5s"
RequestLastBlockTimeout = "5s"
RequestLastBlockMaxRetries = 3
StatisticsPeriod = "5m"
TimeoutMainLoop = "5m"
RollupInfoRetriesSpacing= "5s"
FallbackToSequentialModeOnSynchronized = false
[Synchronizer.L1ParallelSynchronization.PerformanceWarning]
AceptableInacctivityTime = "5s"
ApplyAfterNumRollupReceived = 10

[EthTxManager]
ForcedGas = 0

[L2GasPriceSuggester]
Type = "default"
UpdatePeriod = "10s"
Factor = 0.5
DefaultGasPriceWei = 1000000000
MaxGasPriceWei = 0

[MTClient]
URI  = "{{ .Release.Name }}-executor:50061"

[Executor]
URI = "{{ .Release.Name }}-executor:50071"
MaxGRPCMessageSize = 100000000

[Metrics]
Host = "0.0.0.0"
Port = 9091
Enabled = true
ProfilingHost = "0.0.0.0"
ProfilingPort = 6060
ProfilingEnabled = true

[EventLog]
[EventLog.DB]
User = "pless"
Password = "{{- index $opSecrets.data "dbPlessPassword" | b64dec }}"
Name = "event_db"
Host = "{{ .Release.Name }}-postgresql"
Port = "5432"
EnableLog = false
MaxConns = 200
