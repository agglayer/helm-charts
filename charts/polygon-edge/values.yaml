# -- Override for resource names 
nameOverride: polygon-edge
# -- Override for the full resource. (`"polygon-edge.fullname"`)
fullnameOverride: ""
# -- Override the Kubernetes version
kubeVersionOverride: ""

# Additional Ingress
apiVersionOverrides:
  # -- Override the ingress API version
  ingress: "" # networking.k8s.io/v1beta1

global:
  image:
    # -- The repository for all Polygon Edge containers
    repository: docker.io/0xpolygon/polygon-edge 
    # -- The image tag for all Polygon Edge containers
    tag: ""
    # -- The `imagePullPolicy` for all Polygon Edge containers. If not provided, uses Chart app version
    imagePullPolicy: IfNotPresent
  # -- Annotations for all pods
  podAnnotations: {}
  # -- Labels for all pods
  podLabels: {}
  # -- The `securityContext` for all pods.
  securityContext: {}
  # runAsUser: 1001
  # runAsGroup: 1001
  # fsGroup: 1001

  # -- The `imagePullSecrets` for all pods
  imagePullSecrets: []
  # -- A list of IP to hostname(s) relation
  hostAliases: []
  # - ip: 10.10.10.10
  #   hostnames:
  #     - polygon.edge

  # -- Additional labels for all resources
  additionalLabels: {}

  networkPolicy:
    # -- Creates `NetworkPolicy` for all deployments
    create: false
    # -- Default deny all ingress
    defaultDenyIngress: false
  
  # -- Chain globals
  chain: 
    # -- The Chain ID (default 100)
    chainID: ""

  # -- Blockscout database globals
  postgresql:
    auth:
      # -- Blockscout database username
      username: blockscout
      # -- Blockscout database password
      password: blockscout
      # -- Blockscout database name
      database: blockscout
    service:
      ports:
        # -- Blockscout database port
        postgresql: 5432

secretsManagerConfig:
  # -- The secrets manager type. one of the following: `local`, `aws-ssm`, `gcp-ssm`, or `hashicorp-vault`
  type: local
  # -- Initialize secrets
  initSecrets: true
  # -- The Vault Enterprise namespace, if backend is `hashicorp-vault`
  namespace: admin

  aws:
    # -- The AWS region, if backend is `aws`
    region: ""
    # -- The AWS SSM Parameter key, if backend is `aws`
    ssmParameterPath: ""
  vault:
    # -- The Vault server URL, if backend is `hashicorp-vault`
    serverUrl: ""
    # -- The Vault token, if backend is `hashicorp-vault`
    token: "" 
  gcp:
    # -- The GCP project ID, if backend is `gcp`
    projectId: ""
    # -- The GCP credentials JSON, if backend is `gcp`
    credentialKey: ""

genesis:
  chainConfig:
    # -- Use Proof of Stake over Proof of Authority
    pos: false
    # -- The premine address
    premine: ''
    # -- The chain name in genesis 
    name: polygon-edge
    # -- The Epoch size for the chain.
    epochSize: '100000'
    # -- The consensus protocol
    consensus: ibft
    # -- The type of validators in IBFT 
    ibftValidatorType: bls
    # -- The maximum amount of gas used by all transactions
    blockGasLimit: '5242880'
    # -- Max number of validators for a Proof of Stake 
    maxValidatorCount: '9007199254740990'
    # -- Min number of validators for a Proof of Stake 
    minValidatorCount: '1'

  # -- A Pre-generated chain JSON.
  chainJson: ""

  # -- The identifier for the geneis job.
  name: genesis
  image: 
    # -- The repository for the genesis job container
    repository: ""
    # -- The image tag for the genesis job container. If not provided, uses Chart app version
    tag: ""

  # -- Annotations for the genesis pods
  podAnnotations: {}
  # -- Labels for the genesis pods
  podLabels: {}


  # -- Extra environment variables for the genesis job
  extraEnvs: []
  # -- The `envFrom` for the genesis job
  envFrom: []

  serviceAccount:
    # -- Create a service account for the genesis job 
    create: true
    # --  A service account name override to use
    serviceAccountName: ""
    # -- The annotations for the created service account
    annotations: {}
    # -- Automount the service account API credentials
    automateServiceAccountToken: true

validator:
  replicas: 4
  # -- The identifier for the validator sets
  name: validator
  image: 
    # -- The repository for Polygon Edge validator containers
    repository: ""
    # -- The image tag for Polygon Edge validator containers. If not provided, uses Chart app version
    tag: ""
  persistence:
    # -- Enable persistency for the validator sets
    enabled: false
    labels:
      # -- Enable labels for persistent volumes
      enabled: true
  volumeClaimTemplate:
    # -- The `accessModes` for the validator persistent volume claims
    accessModes:
      - ReadWriteOnce
    # -- The Storage Class name for the validator persistent volume claims
    storageClassName: "" 
    resources:
      requests:
        # -- The requested storage for the validator persistent volume claims 
        storage: 10Gi

  # -- Annotations for validator pods
  podAnnotations: {}
  # -- Labels for validator pods
  podLabels: {}

  # -- Extra environment variables for the Polygon Edge validator set
  extraEnvs: []
  # -- The `envFrom` for the Polygon Edge validator set
  envFrom: []
    
  serviceAccount:
    # -- Create a service account for the Polygon Edge validator set
    create: true
    # --  A service account name override to use
    serviceAccountName: ""
    # -- The annotations for the created service account
    annotations: {}
    # -- Automount the service account API credentials
    automateServiceAccountToken: true

  service:
    # -- The annotations for the Polygon Edge validator service
    annotations: {}
    # -- The labels for the Polygon Edge validator service
    labels: {}
    # -- The service type 
    type: ClusterIP

    libp2p:
      # -- The libp2p (peering) port
      port: 1478
      # -- The libp2p (peering) node port, if service type is `NodePort`
      nodePort: 31478
    grpc:
      # -- The grpc port
      port: 9632
      # -- The grpc node port, if service type is `NodePort`
      nodePort: 39632
    jsonRPC:
      # -- The json-rpc port
      port: 8545 
      # -- The json-rpc node port, if service type is `NodePort`
      nodePort: 38545

    # -- Uses the target port name alias instead of explicit port
    namedTargetPort: true
    # -- The load balancer IP to use, if service type is `LoadBalancer` 
    loadBalancerIP: ""
    # -- The IP CIDR to whitelist, if service type is `LoadBalancer` 
    loadBalancerSourceRanges: []
    # -- The service external IPs 
    externalIPs: []
    # -- The service external trafic policy 
    externalTrafficPolicy: ""
    # -- The session affinity. either `ClientIP` or `None` 
    sessionAffinity: ""

  ingress:
    # -- Enable the validator JSON RPC ingress resource 
    enabled: false
    # -- The annotations for validator JSONRPC ingress
    annotations: {}
    # -- The labels for validator JSONRPC ingress
    lables : {}
    # -- The ingress class name
    ingressClassName: ""
    # -- A list of ingress hosts
    hosts: []
    # -- A list of ingress paths
    paths: 
      - /
    # -- The ingress path type
    pathType: Prefix
    # -- Extra ingress paths
    extraPaths: []
    # -- A list of ingress TLS configuration
    tls: []


  metrics:
    # -- Enables Polygon Edge Validator metrics service
    enabled: false
    service:
      # -- The annotations for the Polygon Edge validator metrics service
      annotations: {}
      # -- The labels for validator metrics service
      labels: {}
      # -- The service type 
      type: ClusterIP
      # -- The metrics node port, if metrics service type is `NodePort`
      nodePort: 8088
      # -- The metrics service port
      servicePort: 8088
      # -- The metrics service port name
      servicePortName: metrics
      # -- Uses the target port name alias instead of explicit port
      namedTargetPort: true
      # -- The load balancer IP to use, if service type is `LoadBalancer` 
      loadBalancerIP: ""
      # -- The IP CIDR to whitelist, if service type is `LoadBalancer` 
      loadBalancerSourceRanges: []
      # -- The service external IPs 
      externalIPs: []
      # -- The service external trafic policy 
      externalTrafficPolicy: ""
      # -- The session affinity. either `ClientIP` or `None` 
      sessionAffinity: ""

  readinessProbe:
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
  livenessProbe:
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1

  serverConfig:
    # -- The CORS allow-origins header for the JSON-RPC endpoint 
    accessControlAllowOrigins: "0x0"
    # -- The minimum block time in seconds
    blockTime: 2
    # -- The max JSON-RPC batch request size limit (0 disables)
    jsonRPCBatchRequestLimit: 20
    # -- The max block range to consider when executing JSON-RPC requests (0 disables)
    jsonRPCBlockRangeLimit: 1000
    # -- Max number of enqueued transactions per account
    maxEnqueued: 128
    # -- The client's total max allowed peers
    maxPeers: 40
    # -- The min gas price limit to enforce for inbound transactions
    priceLimit: 0
    # -- Sets the target block gas limit for the existing chain
    blockGasTarget: 0

  logging:
    # -- The log format for Polygon Edge validator sets 
    format: "syslog"
    # -- The log format for Polygon Edge validator sets
    level: info

config:
  # -- The data directory for polygon-edge to use
  dataDir: /opt/polygon-edge/data
  datadog:
    # -- Enable Datadog 
    enabled: false

extraFeatures:
  blockscout:
    # -- Enable Blockscout (https://docs.blockscout.com/)
    enabled: false
    # -- Identifier for blockscout resources
    name: blockscout
    
    image:
      # -- Blockscout container repository
      repository: docker.io/blockscout/blockscout
      # -- Image pull policy
      pullPolicy: IfNotPresent
      # -- Image tag
      tag: "4.1.8"
    
    # -- Replica count
    replicaCount: 1
    # -- Pod Annotations
    podAnnotations: {}
    # -- Image pull secrets
    imagePullSecrets: []
    # -- Security context
    securityContext: {}
    # -- Resources
    resources: {}
    # -- Node selector
    nodeSelector: {}
    # -- Tolerations
    tolerations: []
    # -- Affinity
    affinity: {}

    autoscaling:
      # -- Enable autoscaling
      enabled: false
      # -- Maximum number of replicas
      minReplicas: 1
      # -- Minimum number of replicas
      maxReplicas: 10
      # -- Target CPU percentage
      targetCPUUtilizationPercentage: 90
      # -- Target Memory utilization percentage
      targetMemoryUtilizationPercentage: 90
    
    service:
      # -- Service name
      namedPort: http
      # -- Service port
      port: 4000
      # -- Service annotations
      annotations: {}
      # -- Service labels
      labels: {}
      # -- Service type
      type: ClusterIP

    ingress:
      # -- Disable or enable ingress
      enabled: false
      # -- The ingress class name
      ingressClassName: ""
      # -- Ingress annotations
      annotations: {}
      # -- Ingress paths
      paths:
      - /
      # -- Ingress path type
      pathType: Prefix
      # -- Extra ingress paths
      extraPaths: []
      # -- Ingress hosts
      hosts: []
      # -- Ingress TLS parameters
      tls: []
      # -- Ingress lables
      labels: {}
    
    readinessProbe:
      # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
      failureThreshold: 3
      # -- Number of seconds after the container has started before [probe] is initiated
      initialDelaySeconds: 10
      # -- How often (in seconds) to perform the [probe]
      periodSeconds: 10
      # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
      successThreshold: 1
      # -- Number of seconds after which the [probe] times out
      timeoutSeconds: 1
    livenessProbe:
      # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
      failureThreshold: 3
      # -- Number of seconds after the container has started before [probe] is initiated
      initialDelaySeconds: 10
      # -- How often (in seconds) to perform the [probe]
      periodSeconds: 10
      # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
      successThreshold: 1
      # -- Number of seconds after which the [probe] times out
      timeoutSeconds: 1

    # -- Blockscout database backend
    database:
      # -- Enable local postgresql database
      enabled: true
      # -- Skip database migration step
      skipMigration: false
      # -- External database connection
      external: 
        # -- Remote database connection string
        connString: ""
    
    # -- Blockchain configuration
    config:
      # -- Coin symbol
      coinSymbol: EDGE
      # -- Coin name
      coinName: Edge Coin
      # -- Blockscout instance logo
      logo: /images/blockscout_logo.svg
      # -- Blockscout instance footer logo
      logoFooter: /images/blockscout_logo.svg
      # -- Use SSL to communicate with database
      ectoUseSSL: false
      # -- Set producion environment
      mixEnv: prod
      # -- Disable exchange rates fetch
      disableExchangeRates: true
      # -- Fetch mine rewards manually
      fetchRewardWay: manual
      # -- Disable block rewards fetcher
      indexerDisableBlockRewardFetcher: true
      # -- Disable internal transactions fetcher
      indexerDisableInternalTransactionsFetcher: true
      # -- Disable cataloged token updater fetcher
      indexerDisableCatalogedTokenUpdaterFetcher: true
      # -- Empty block sanitizer batch size
      indexerEmptyBlocksSanitizerBatchSize: 1000
      # -- Enable pending transactions fetcher
      indexerDisablePendingTransactionsFetcher: false
      # -- Extra environment variables for Blockscout configuration (https://docs.blockscout.com/for-developers/information-and-settings/env-variables)
      extraEnvs: []

postgresql:
# -- Blockscout database name override
  nameOverride: polygon-edge-blockscout-database
  persistence:
    # -- Permanent volume size
    size: 10Gi
