{{- $opSecrets := (lookup "v1" "Secret" .Release.Namespace .Values.existingSecret) }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "op-geth.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "op-geth.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "op-geth.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "op-geth.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      serviceAccountName: download-genesis
      initContainers:
        - name: download-genesis
          image: google/cloud-sdk:latest
          command: ["sh", "-c"]
          args:
          - |
            gsutil cp gs://{{ .Values.genesisFileGCP.bucket }}/{{ .Values.genesisFileGCP.object }} /genesis/genesis.json
          volumeMounts:
            - mountPath: "/genesis"
              name: genesis
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.container.image.repository }}:{{ .Values.container.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.container.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              # Init genesis
              echo 'Initializing genesis'
              geth init --datadir={{ .Values.storage.path }} --state.scheme=hash /genesis/genesis.json

              # Start op-geth
              echo 'Starting op-geth'
              geth \
                --datadir {{ .Values.storage.path }} \
                --http \
                --http.corsdomain="*" \
                --http.vhosts="*" \
                --http.addr=0.0.0.0 \
                --http.port={{ .Values.service.http.port }} \
                --http.api={{ .Values.config.http.api }} \
                --ws \
                --ws.addr=0.0.0.0 \
                --ws.port={{ .Values.service.ws.port }} \
                --ws.origins="*" \
                --ws.api={{ .Values.config.ws.api }} \
                --log.format=json \
                --syncmode="full" \
                --gcmode={{ .Values.config.nodeType }} \
                --nodiscover \
                --maxpeers=0 \
                --networkid={{ .Values.config.l2.chainId }} \
                --authrpc.vhosts="*" \
                --authrpc.addr=0.0.0.0 \
                --authrpc.port={{ .Values.service.authrpc.port }} \
                --authrpc.jwtsecret=/chainconfig/jwt.txt \
                --rollup.disabletxpoolgossip=true \
                --rpc.allow-unprotected-txs \
                --db.engine=pebble \
                --state.scheme=hash \
                {{- range .Values.config.extraOptions }}
                --{{ . }} \
                {{- end}}
                --miner.gaslimit={{ .Values.config.miner.gasLimit | int64 }} \
                --txpool.accountqueue={{ .Values.config.txpool.accountqueue }} \
                --txpool.accountslots={{ .Values.config.txpool.accountslots }} \
                --txpool.globalqueue={{ .Values.config.txpool.globalqueue }} \
                --txpool.globalslots={{ .Values.config.txpool.globalslots }}
          ports:
            - name: authrpc
              containerPort: {{ .Values.service.authrpc.port }}
              protocol: TCP
            - name: http
              containerPort: {{ .Values.service.http.port }}
              protocol: TCP
            - name: ws
              containerPort: {{ .Values.service.ws.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: "/genesis"
              name: genesis
              readOnly: true
            - mountPath: "/chainconfig"
              name: config
              readOnly: true
            - mountPath: {{ .Values.storage.path | quote }}
              name: data
      volumes:
        - name: genesis
          emptyDir: {}
        - name: config
          projected:
            sources:
              - secret:
                  name: {{ .Values.existingSecret }}
                  items:
                    - key: "jwt"
                      path: "jwt.txt"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.size }}
